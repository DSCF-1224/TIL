! ==================================================================================================================================
! [used compiler]
! gcc version 9.2.0 (Rev2, Built by MSYS2 project)
! [reference]
! http://fortranwiki.org/fortran/show/leadz
! https://www.exploringbinary.com/ten-ways-to-check-if-an-integer-is-a-power-of-two-in-c/
! ==================================================================================================================================

program test_leadz

    ! <module>s to import
    use, intrinsic :: iso_fortran_env


    ! require all variables to be explicitly declared
    implicit none


    ! support variables for this <program>
    integer(INT32) :: itr

    ! STEP.01
    ! initialization
    itr = 0_INT32

    ! STEP.02
    ! test the `leadz`
    do while (.true.)

        if ( ispow2(itr) ) then
            print '(I10,1X,B32.32,I3,I3)', itr, itr, log2pow2(itr)
        end if

        if ( itr .eq. huge(itr) ) exit

        itr = itr + 1_INT32

    end do
    
    contains
    
    pure function ispow2 (i)
    
        integer(INT32), intent(in) :: i
        logical                    :: ispow2
        
        ispow2 = (i .ne. 0_INT32) .and. ( iand(i, not(i) + 1_INT32) .eq. i )
    
    end function ispow2
    
    pure function log2pow2 (i)
    
        integer(INT32), intent(in) :: i
        integer                    :: log2pow2
        
        log2pow2 = 31 - leadz(i)
    
    end function log2pow2

end program test_leadz

! ==================================================================================================================================
! itr        itr (binary)                     log2pow2
!          1 00000000000000000000000000000001  0
!          2 00000000000000000000000000000010  1
!          4 00000000000000000000000000000100  2
!          8 00000000000000000000000000001000  3
!         16 00000000000000000000000000010000  4
!         32 00000000000000000000000000100000  5
!         64 00000000000000000000000001000000  6
!        128 00000000000000000000000010000000  7
!        256 00000000000000000000000100000000  8
!        512 00000000000000000000001000000000  9
!       1024 00000000000000000000010000000000 10
!       2048 00000000000000000000100000000000 11
!       4096 00000000000000000001000000000000 12
!       8192 00000000000000000010000000000000 13
!      16384 00000000000000000100000000000000 14
!      32768 00000000000000001000000000000000 15
!      65536 00000000000000010000000000000000 16
!     131072 00000000000000100000000000000000 17
!     262144 00000000000001000000000000000000 18
!     524288 00000000000010000000000000000000 19
!    1048576 00000000000100000000000000000000 20
!    2097152 00000000001000000000000000000000 21
!    4194304 00000000010000000000000000000000 22
!    8388608 00000000100000000000000000000000 23
!   16777216 00000001000000000000000000000000 24
!   33554432 00000010000000000000000000000000 25
!   67108864 00000100000000000000000000000000 26
!  134217728 00001000000000000000000000000000 27
!  268435456 00010000000000000000000000000000 28
!  536870912 00100000000000000000000000000000 29
! 1073741824 01000000000000000000000000000000 30
! ==================================================================================================================================
